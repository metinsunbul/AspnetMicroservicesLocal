docker pull mongo
docker run -d -p 27017:27017 --name shopping-mongo mongo
docker ps
docker logs -f shopping-mongo

--open interactive terminal
docker exec -it shopping-mongo /bin/bash

ls
mongo
show dbs
use CatalogDb
db.createCollection('Products')
db.Products.insertMany([{ 'Name':'Asus Laptop','Category':'Computers', 'Summary':'Summary', 'Description':'Description', 'ImageFile':'ImageFile', 'Price':54.93 }, { 'Name':'HP Laptop', 'Category':'Computers', 'Summary':'Summary', 'Decription':'Description', 'ImageFile':'ImageFile', 'Price':88.93 } ])
 db.Products.find({}).pretty()
 db.Products.remove({})
 show databases
 show collections



 --to run docker compose yml file (right click docker-compose and open in Terminal)
 ls
 docker ps --check running container
 --stop the running version of mongo instance to avoid any conflict
 docker stop d299
 docker rm d299
 docker images
  docker rmi d34d


  docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml up -d
  docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml down

  docker ps
  docker ps -aq
  --stop and remove all of the containers from local using the below commands
  docker stop $(docker ps -aq)
  docker rm $(docker ps -aq)

  docker rmi $(docker images -q)

  --remove unnamed images
  docker system prune

  docker images

  --mongo client image to visualize mongo database 
  docker run -d -p 3000:3000 mongoclient/mongoclient  

  docker ps



  ----------------pull REDIS images for basket.API
  docker pull redis
  docker images
  docker run -d -p 6379:6379 --name aspnetrunLocal-redis redis
  docker ps


  Some useful docker commands For troubleshooting in docker container
  docker logs -f aspnetrunLocal-redis
  --inspect --> runs command inside redis container  , -it means interactive terminal
  docker exec -it aspnetrunLocal-redis /bin/bash
  redis-cli
  ping
  set key value
  get key

  Install-Package Microsoft.Extensions.Caching.StackExchangeRedis
  Update-Package -ProjectName Basket.API

  docker stop ad98
  docker ps
  docker ps -a
  docker rm ad98
  docker images
  docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d


  ---Portainer -> Open-source Container Management portal
  --add portainer into dockor-compose service
  --after adding service and its configuration detail accorfingly to docker-compose.yml and docker-compose.override.yml file  run the below command
  docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
  docker ps


  --SET UP POSTGRESQL as discount service db
  --Setup pgAdmin Management Portal for PostreSQL 
  docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
  docker ps

  --Containerize Discount Microservices with postgreSQL database using Docker Compose (Use Dapper as mini ORM)

  --install packages via Package Manager Console
  --for postgreSQL
  Install-Package Npgsql
  --For Dapper
  Install-Package Dapper
  Update-Package -ProjectName Discount.API

  --Local sql postgreSql database
   "DatabaseSettings": {
    "ConnectionString":  "Server=localhost;Port=5432;Database=DiscountDb;User Id=admin;Password=admin1234;"
  },
  --When dockerizing or containerizing we should override this connectionstring name(Server=localhost) with the docker container name

  --Containerize Discount Microservices with PostreSQL using docker-compose

  --Migration and seedings of postgresql 
  static IHost MigrateDatabase<TContext>(this IHost host, int? retry = 0)
  --this retry mechanism used in case the discount is up and postgresql(container) is not ready. 
  if (retryForAvailability < 50) //Convert this retry operation using polly for the microservices resilience.(It helps to make resilience of microservices with creating policies on retry and circut-breaker design patterns )
   

   docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
   docker ps
   docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml down


   --Discount.Grpc microservices with PostgreSQL
   Update-Package -ProjectName Discount.Grpc
   
   docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
   docker ps

   --install automapper via Packcage manager console
   Install-Package AutoMapper.Extensions.Microsoft.DependencyInjection

   --Consume Discount Grpc service from Basket Api microservice

   --Contianerize Discount Grpc Microservices with PostgreSQL
   --In order to add docker file and manage the docker compose yml file we use visual studio Container Orchestrator support 

   --Docker Environment->Basket.API integration with Discount.Grpc
   --Any change in basket.API  require recreation of its image  which means using --build command or as the second option we can remove all the container and images to let it recreate all the images

   docker images
   basketapi image exists but some code changes occured so we would like to rebuilding the basket api image with the existing docker file in order to that use the below command

   docker-compose -f docker-compose.yml -f docker-compose.override.yml up --build
   docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
   docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml down


   --Order.API video 66
   --install MediatR package via Package Manager Console
   Install-Package MediatR.Extensions.Microsoft.DependencyInjection

   --AddingApp & InfrastructureServicesIntoSingleExtensionMethod(ApplicationServiceRegistration)
   Update-Package
   Install-Package AutoMapper.Extensions.Microsoft.DependencyInjection
   Install-Package FluentValidation.DependencyInjectionExtensions

   --Ordering.Infrastructure
 
 --Migration
 --add the below package to Ordering.API
 Install-Package Microsoft.EntityFrameworkCore.Tools
 --Add migration to Ordering.Infrastructure
 Add-Migration InitialCreate

 -Dockerize Order.API
 docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
 docker ps
 docker-compose -f docker-compose.yml -f docker-compose.override.yml down

 --RABBITMQ
 --Add RabbitMQ imaje into docker-compose.yml file
 --After rabbitmq image into docker-compose.yml  and its configuration into docker-compose.override.yml file run the below command to run container in our local environment
 docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d

 --install the required package for rabbitmq integration via package manager console
 Install-Package MassTransit
 Install-Package MassTransit.RabbitMQ
 Install-Package MassTransit.AspNetCore

 --Publishing message from Basket.API
 --Donwload Automapper for mapping BasketCheckout model to BasketCheckoutEvent model via Package manager console
 Install-Package AutoMapper.Extensions.Microsoft.DependencyInjection
 Update-Package -ProjectName Basket.API

 --Consume message by Order.API
 Install-Package MassTransit
 Install-Package MassTransit.RabbitMQ
 Install-Package MassTransit.AspNetCore
 Update-Package -ProjectName Ordering.API

 -- Containerize basket and order microservice with rabbitMQ using docker-compose
 -- Since we added new project reference and update(recreated) docker file (COPY ["BuildingBlocks/EventBus.Messages/EventBus.Messages.csproj", "BuildingBlocks/EventBus.Messages/"]) 
-- we have to 2 options for docker images either Delete image and recreate the image using docker-compose up command
-- docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
-- or use docker --build command to rebuild the images with newest docker files again
-- we not only update docker-compose.override.yml file but also changed docker file 
-- so we have to update those images
--stop and removes all contianer using below command on local docker environment
docker-compose -f docker-compose.yml -f docker-compose.override.yml down
-- see all the running container on the local docker environment using below command
docker ps 
--use the below build command to create new image given the changed docker file
docker-compose -f docker-compose.yml -f docker-compose.override.yml up --build




-- NOTE: as you added a new project to the solution, don't forget update docker file accordingly
 -- COPY ["Services/Ordering/Ordering.API/Ordering.API.csproj", "Services/Ordering/Ordering.API/"]
 -- COPY ["Services/Ordering/Ordering.Application/Ordering.Application.csproj", "Services/Ordering/Ordering.Application/"]
 -- COPY ["Services/Ordering/Ordering.Domain/Ordering.Domain.csproj", "Services/Ordering/Ordering.Domain/"]
 -- COPY ["Services/Ordering/Ordering.Infrastructure/Ordering.Infrastructure.csproj", "Services/Ordering/Ordering.Infrastructure/"]

 --OcelotApiGateway 114.avi
 --install package via package manager console
 Install-Package Ocelot
 Update-Package -ProjectName OcelotApiGw
 docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
   --Cache package manager for caching  ocelot responses
   Install-Package Ocelot.Cache.CacheManager
   Install-Package Ocelot.Cache.CacheManager -version "17.0.0"
   --Containerie Ocelo Api Gateway Microservices using docker-compose
   --After adding Container ocrhestration support from visual studio 
   --(clicking on the project add Container orchestration supoort) 
   --Dockerfile.yml file added and docker-compose.yml file updated accordingly
   docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
   docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml down

--Api Gateway Aggregate pattern vs. Api Gateway Route pattern
docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml down

--Web Apps
dotnet tool install --global dotnet-ef
dotnet ef migrations add MyFirstMigration
 dotnet ef database update
docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml down




--ElasticSearch and Kibana
-https://hub.docker.com/_/elasticsearch/
-https://hub.docker.com/_/kibana/
-https://github.com/thecarlo/elastic-kibana-netcore-serilog/blob/master/src/docker/docker-compose.yml

docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml down

--Install and configure serilog for elastic search and Kibana sink integration
Install-Package Serilog.AspNetCore
Install-Package Serilog.Enrichers.Environment
Install-Package Serilog.Sinks.Elasticsearch





