docker pull mongo
docker run -d -p 27017:27017 --name shopping-mongo mongo
docker ps
docker logs -f shopping-mongo

--open interactive terminal
docker exec -it shopping-mongo /bin/bash

ls
mongo
show dbs
use CatalogDb
db.createCollection('Products')
db.Products.insertMany([{ 'Name':'Asus Laptop','Category':'Computers', 'Summary':'Summary', 'Description':'Description', 'ImageFile':'ImageFile', 'Price':54.93 }, { 'Name':'HP Laptop', 'Category':'Computers', 'Summary':'Summary', 'Decription':'Description', 'ImageFile':'ImageFile', 'Price':88.93 } ])
 db.Products.find({}).pretty()
 db.Products.remove({})
 show databases
 show collections



 --to run docker compose yml file (right click docker-compose and open in Terminal)
 ls
 docker ps --check running container
 --stop the running version of mongo instance to avoid any conflict
 docker stop d299
 docker rm d299
 docker images
  docker rmi d34d


  docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml up -d
  docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml down

  docker ps
  docker ps -aq
  --stop and remove all of the containers from local using the below commands
  docker stop $(docker ps -aq)
  docker rm $(docker ps -aq)

  docker rmi $(docker images -q)

  --remove unnamed images
  docker system prune

  docker images

  --mongo client image to visualize mongo database 
  docker run -d -p 3000:3000 mongoclient/mongoclient  

  docker ps



  ----------------pull REDIS images for basket.API
  docker pull redis
  docker images
  docker run -d -p 6379:6379 --name aspnetrunLocal-redis redis
  docker ps


  Some useful docker commands For troubleshooting in docker container
  docker logs -f aspnetrunLocal-redis
  --inspect --> runs command inside redis container  , -it means interactive terminal
  docker exec -it aspnetrunLocal-redis /bin/bash
  redis-cli
  ping
  set key value
  get key

  Install-Package Microsoft.Extensions.Caching.StackExchangeRedis
  Update-Package -ProjectName Basket.API

  docker stop ad98
  docker ps
  docker ps -a
  docker rm ad98
  docker images
  docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d


  ---Portainer -> Open-source Container Management portal
  --add portainer into dockor-compose service
  --after adding service and its configuration detail accorfingly to docker-compose.yml and docker-compose.override.yml file  run the below command
  docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
  docker ps


  --SET UP POSTGRESQL as discount service db
  --Setup pgAdmin Management Portal for PostreSQL 
  docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
  docker ps

  --Containerize Discount Microservices with postgreSQL database using Docker Compose (Use Dapper as mini ORM)

  --install packages via Package Manager Console
  --for postgreSQL
  Install-Package Npgsql
  --For Dapper
  Install-Package Dapper
  Update-Package -ProjectName Discount.API

  --Local sql postgreSql database
   "DatabaseSettings": {
    "ConnectionString":  "Server=localhost;Port=5432;Database=DiscountDb;User Id=admin;Password=admin1234;"
  },
  --When dockerizing or containerizing we should override this connectionstring name(Server=localhost) with the docker container name

  --Containerize Discount Microservices with PostreSQL using docker-compose

  --Migration and seedings of postgresql 
  static IHost MigrateDatabase<TContext>(this IHost host, int? retry = 0)
  --this retry mechanism used in case the discount is up and postgresql(container) is not ready. 
  if (retryForAvailability < 50) //Convert this retry operation using polly for the microservices resilience.(It helps to make resilience of microservices with creating policies on retry and circut-breaker design patterns )
   

   docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
   docker ps
   docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml down


   --Discount.Grpc microservices with PostgreSQL
   Update-Package -ProjectName Discount.Grpc
   
   docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
   docker ps

   --install automapper via Packcage manager console
   Install-Package AutoMapper.Extensions.Microsoft.DependencyInjection


